# .github/workflows/deploy-openshift.yml

name: Build and Deploy to OpenShift

# Déclenche le workflow à chaque push sur la branche 'main'
on:
  push:
    branches:
      - main

jobs:
  # --- JOB POUR LE BACKEND ---
  build-and-deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest # Le workflow s'exécute sur une machine virtuelle Ubuntu

    steps:
      # Étape 1: Récupérer le code du dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # Étape 2: Se connecter à Quay.io
      - name: Login to Quay.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      # Étape 3: Construire et pousser l'image du backend
      - name: Build and Push Backend Image
        run: |
          podman build ./app -t quay.io/neutron-it/rag-projet:latest --platform linux/amd64
          podman push quay.io/neutron-it/rag-projet:latest

      # Étape 4: Se connecter à OpenShift
      - name: Install OpenShift Tools
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: 'latest'
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OC_SERVER }}
          openshift_token: ${{ secrets.OC_TOKEN }}
          insecure_skip_tls_verify: true # À utiliser si votre cluster n'a pas de certificat valide

      # Étape 5: Déployer le backend sur OpenShift
      - name: Deploy Backend to OpenShift
        run: |
          # Crée le projet s'il n'existe pas
          oc get project rag-projet || oc new-project rag-projet --display-name="Projet RAG"

          # Crée le secret pour Quay.io s'il n'existe pas
          oc get secret quay-secret -n rag-projet || oc create secret docker-registry quay-secret \
            --docker-server=quay.io \
            --docker-username=${{ secrets.QUAY_USERNAME }} \
            --docker-password=${{ secrets.QUAY_PASSWORD }} \
            --docker-email=${{ secrets.QUAY_EMAIL }} -n rag-projet

          # Lie le secret au service account 'default' pour le pull d'images
          oc secrets link default quay-secret --for=pull -n rag-projet

          # Applique les configurations. oc apply est idempotent (ne fait rien si déjà à jour)
          oc apply -f ./app/deployment.yaml -n rag-projet
          oc apply -f ./app/04-service.yaml -n rag-projet
          oc apply -f ./app/05-route.yaml -n rag-projet


  # --- JOB POUR LE FRONTEND ---
  build-and-deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    # Ce job dépend du succès du job backend
    needs: build-and-deploy-backend

    steps:
      # Étape 1: Récupérer le code du dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # Étape 2: Se connecter à Quay.io
      - name: Login to Quay.io
        uses: redhat-actions/podman-login@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      # Étape 3: Construire et pousser l'image du frontend
      - name: Build and Push Frontend Image
        run: |
          podman build ./chatbot-rag-ui -t quay.io/neutron-it/rag-projet-front:latest --platform linux/amd64
          podman push quay.io/neutron-it/rag-projet-front:latest

      # Étape 4: Se connecter à OpenShift
      - name: Login to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OC_SERVER }}
          openshift_token: ${{ secrets.OC_TOKEN }}
          insecure_skip_tls_verify: true

      # Étape 5: Déployer le frontend sur OpenShift
      - name: Deploy Frontend to OpenShift
        run: |
          oc apply -f ./chatbot-rag-ui/frontend-deployment.yaml -n rag-projet
          oc apply -f ./chatbot-rag-ui/frontend-service.yaml -n rag-projet
          oc apply -f ./chatbot-rag-ui/frontend-route.yaml -n rag-projet
